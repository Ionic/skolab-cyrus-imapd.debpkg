From 22d8e9f4121bf788935a90e458e92568c669f296 Mon Sep 17 00:00:00 2001
From: Thomas Jarosch <thomas.jarosch@intra2net.com>
Date: Thu, 21 Nov 2013 11:50:20 +0100
Subject: Fix ACL string corruption on removal of an ACL identifier

It's an invalid operation to call strcpy() on overlapping memory buffers.
Newer glibc versions use special optimizations and therefore
compute unexpected results (=trash the ACLs).

Fix it by constructing the modified ACL string in a new buffer.

--- cyrus-imapd-2.4.orig/lib/acl_afs.c
+++ cyrus-imapd-2.4/lib/acl_afs.c
@@ -186,8 +186,18 @@ void *canonrock;
     }
 
     if (access == 0L) {
-	/* Remove any existing entry for 'identifier' */
-	strcpy(thisid, nextid);
+	/* Remove any existing entry for 'identifier'.
+	   Special case: When we try to delete an invalid/non-existent identifier,
+	   both 'thisid' and 'nextid' point to the end of *acl. */
+	newacl = xmalloc(strlen(*acl) + strlen(nextid) - strlen(thisid) + 1);
+	/* Copy existing ACLs without the current identifier.
+	   Note: The buffer will not be zero terminated. */
+	strncpy(newacl, *acl, (thisid - *acl));
+	/* Append the remaining ACL string. Zero-terminates the string. */
+	strcpy(newacl + (thisid - *acl), nextid);
+
+	free(*acl);
+	*acl = newacl;
     }
     else {
 	/* Replace any existing entry for 'identifier' */
