Description: Adds some enhancements to sieveshell and fixes some paths.
Author: Sven Mueller <debian@incase.de>
Forwarded: https://github.com/cyrusimap/cyrus-imapd/pull/3281
Reviewed-By: Xavier Guimard <yadd@debian.org
Last-Update: 2020-02-10

--- a/perl/imap/IMAP/Shell.pm
+++ b/perl/imap/IMAP/Shell.pm
@@ -445,7 +445,7 @@
 sub shell {
   my ($server, $port, $authz, $auth, $systemrc, $userrc, $dorc, $mech, $pw,
       $tlskey, $notls, $cacert, $capath) =
-    ('', 143, undef, $ENV{USER} || $ENV{LOGNAME}, '/usr/local/etc/cyradmrc.pl',
+    ('', 143, undef, $ENV{USER} || $ENV{LOGNAME}, '/etc/cyradmrc.pl',
      "$ENV{HOME}/.cyradmrc.pl", 1, undef, undef, undef, undef, undef, undef);
   GetOptions('user|u=s' => \$auth,
              'authz|z=s' => \$authz,
@@ -483,7 +483,7 @@
                           -mechanism => $mech, -password => $pw,
                           -tlskey => $tlskey, -notls => $notls,
                           -cafile => $cacert, -capath => $capath)
-      or die "cyradm: cannot authenticate to server with $mech as $auth\n";
+      or die "cyradm: cannot authenticate to server" . (defined($mech)?" with $mech":"") . " as $auth\n";
   }
   my $fstk = [*STDIN, *STDOUT, *STDERR];
   if ($dorc && $systemrc ne '' && -f $systemrc) {
--- a/perl/sieve/scripts/sieveshell.pl
+++ b/perl/sieve/scripts/sieveshell.pl
@@ -62,7 +62,9 @@
 my $username = $ENV{USER};
 my $authname = $ENV{USER};
 my $realm = "";
+my $password;
 my $ex = "";
+my $exfile = "";
 my $help = 0;
 my $man = 0;
 my $ret;
@@ -70,7 +72,9 @@
 GetOptions("a|authname:s" => \$authname,
     "u|username:s" => \$username,
     "r|realm:s" => \$realm,
+    "p|password:s" => \$password,
     "e|exec:s" => \$ex,
+    "f|execfile:s" => \$exfile,
     "help|?" => \$help,
     man => \$man) or pod2usage(2);
 pod2usage(1) if $help;
@@ -85,20 +89,24 @@
 my $filehandle;
 my $interactive;
 
-if (! $ex eq "") {
-    $filehandle = tempfile();
-
-    if (!$filehandle) { die "unable to open tmp file: $?"; }
-
-    print $filehandle $ex;
-    seek $filehandle, 0, 0; # rewind file
+if (! $exfile eq "") {
+    open(FILEH,"<$exfile") || die "unable to open file: $?";
+    $filehandle = *FILEH;
     $interactive = 0;
 } else {
-    $filehandle = *STDIN;
-    $interactive = 1;
-}
+    if (! $ex eq "") {
+	$filehandle = tempfile();
 
+	if (!$filehandle) { die "unable to open tmp file: $?"; }
 
+	print $filehandle $ex;
+	seek $filehandle, 0, 0; # rewind file
+	$interactive = 0;
+    } else {
+	$filehandle = *STDIN;
+	$interactive = 1;
+    }
+}
 
 sub list_cb {
 
@@ -123,6 +131,8 @@
       return $authname;
   } elsif (($type eq "realm") && (defined $realm)) {
       return $realm;
+  } elsif (($type eq "password") && (defined $password)) {
+      return $password;
   }
 
   my $ostty;
@@ -173,6 +183,8 @@
 
 my $term = Term::ReadLine->new("sieveshell");
 
+my $exitcode = 0;
+
 $term->ornaments(0);
 
 while(defined($_  = ($interactive ? $term->readline('> ') : <$filehandle>))){
@@ -199,6 +211,7 @@
         my $errstr = sieve_get_error($obj);
         $errstr = "unknown error" if(!defined($errstr));
         print "upload failed: $errstr\n";
+	$exitcode = 1;
       }
     } elsif (($words[0] eq "list") ||
              ($words[0] eq "l") ||
@@ -208,6 +221,7 @@
             my $errstr = sieve_get_error($obj);
             $errstr = "unknown error" if(!defined($errstr));
             print "list failed: $errstr\n";
+	    $exitcode = 1;
         }
     } elsif (($words[0] eq "activate") ||
              ($words[0] eq "a")) {
@@ -220,6 +234,7 @@
             my $errstr = sieve_get_error($obj);
             $errstr = "unknown error" if(!defined($errstr));
             print "activate failed: $errstr\n";
+	    $exitcode = 1;
         }
     } elsif (($words[0] eq "deactivate") ||
              ($words[0] eq "da")) {
@@ -232,6 +247,7 @@
             my $errstr = sieve_get_error($obj);
             $errstr = "unknown error" if(!defined($errstr));
             print "deactivate failed: $errstr\n";
+	    $exitcode = 1;
         }
     } elsif (($words[0] eq "delete") ||
              ($words[0] eq "d")) {
@@ -244,6 +260,7 @@
             my $errstr = sieve_get_error($obj);
             $errstr = "unknown error" if(!defined($errstr));
             print "delete failed: $errstr\n";
+	    $exitcode = 1;
         }
     } elsif (($words[0] eq "get") ||
              ($words[0] eq "g")) {
@@ -257,6 +274,7 @@
             my $errstr = sieve_get_error($obj);
             $errstr = "unknown error" if(!defined($errstr));
             print "get failed: $errstr\n";
+	    $exitcode = 1;
         } else {
             if ($words[2]) {
                 open (OUTPUT,">$words[2]") || die "Unable to open $words[2]";
@@ -268,14 +286,16 @@
         }
     } elsif (($words[0] eq "quit") || ($words[0] eq "q")) {
         sieve_logout($obj);
-        exit 0;
     } elsif (($words[0] eq "help") || ($words[0] eq "?")) {
         show_help();
     } else {
         print "Invalid command: $words[0]\n";
+	$exitcode = 1;
     }
 }
 
+exit $exitcode
+
 __END__
 
 =for pod2rst .. DO NOT EDIT sieveshell.rst: Autogenerated by tools/perl2rst from perl/sieve/scripts/sieveshell.pl
@@ -291,7 +311,8 @@
 =head1 SYNOPSIS
 
 sieveshell [B<--user>=I<user>] [B<--authname>=I<authname>]
-[B<--realm>=I<realm>] [B<--exec>=I<script>] I<server>[B<:>I<port>]
+[B<--realm>=I<realm>] [B<--password>=I<password>]
+[B<--exec>=I<script>] [B<--execfile>=I<file>] I<server>[B<:>I<port>]
 
 sieveshell B<--help>
 
@@ -336,11 +357,21 @@
 
 The realm to attempt authentication in.
 
+=item B<-p> I<password>, B<--password>=I<password>
+
+The password to use when authenticating to server. Note that this
+parameter can be seen in the process list. B<Use with caution!>
+
 =item B<-e> I<script>, B<--exec>=I<script>
 
 Instead of working interactively, run commands from I<script>, and
 exit when done.
 
+=item B<-f> I<file>, B<--execfile>=I<file>
+
+Instead of working interactively, run commands from file I<file> and
+exit when done.
+
 =back
 
 =head1 REFERENCES
