#! /bin/sh /usr/share/dpatch/dpatch-run
## 0003-upstream_disallow_userprobes.dpatch by Sven Mueller <debian@incase.de>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Upstream: Disallow probing for known user names
## DP: Changes behaviour to always return "Login failed" instead of returning
## DP: "Unknown user" for unknown user names.

@DPATCH@
--- a/imap/imapd.c
+++ b/imap/imapd.c
@@ -1785,6 +1785,9 @@ void cmd_login(char *tag, char *user)
 
 	sleep(3);
 
+	/* Don't allow user probing */
+	if (r == SASL_NOUSER) r = SASL_BADAUTH;
+
 	if ((reply = sasl_errstring(r, NULL, NULL)) != NULL) {
 	    prot_printf(imapd_out, "%s NO Login failed: %s\r\n", tag, reply);
 	} else {
@@ -1898,8 +1901,6 @@ cmd_authenticate(char *tag, char *authty
 	    break;
 	default: 
 	    /* failed authentication */
-	    errorstring = sasl_errstring(sasl_result, NULL, NULL);
-
 	    syslog(LOG_NOTICE, "badlogin: %s %s [%s]",
 		   imapd_clienthost, authtype, sasl_errdetail(imapd_saslconn));
 
@@ -1908,6 +1909,10 @@ cmd_authenticate(char *tag, char *authty
 				VARIABLE_LISTEND);
 	    sleep(3);
 
+	    /* Don't allow user probing */
+	    if (sasl_result == SASL_NOUSER) sasl_result = SASL_BADAUTH;
+
+	    errorstring = sasl_errstring(sasl_result, NULL, NULL);
 	    if (errorstring) {
 		prot_printf(imapd_out, "%s NO %s\r\n", tag, errorstring);
 	    } else {
--- a/imap/nntpd.c
+++ b/imap/nntpd.c
@@ -2140,13 +2140,16 @@ static void cmd_authinfo_sasl(char *cmd,
 	    default:
 		code = 481;
 	    }
-	    errorstring = sasl_errstring(sasl_result, NULL, NULL);
 
 	    syslog(LOG_NOTICE, "badlogin: %s %s [%s]",
 		   nntp_clienthost, mech, sasl_errdetail(nntp_saslconn));
 
 	    sleep(3);
 
+	    /* Don't allow user probing */
+	    if (sasl_result == SASL_NOUSER) sasl_result = SASL_BADAUTH;
+
+	    errorstring = sasl_errstring(sasl_result, NULL, NULL);
 	    if (errorstring) {
 		prot_printf(nntp_out, "%d %s\r\n", code, errorstring);
 	    } else {
--- a/imap/pop3d.c
+++ b/imap/pop3d.c
@@ -1027,15 +1027,18 @@ static void cmd_apop(char *response)
     /* failed authentication */
     if (sasl_result != SASL_OK)
     {
+	syslog(LOG_NOTICE, "badlogin: %s APOP (%s) %s",
+	       popd_clienthost, popd_apop_chal,
+	       sasl_errdetail(popd_saslconn));
+	
 	sleep(3);      
 		
+	/* Don't allow user probing */
+	if (sasl_result == SASL_NOUSER) sasl_result = SASL_BADAUTH;
+		
 	prot_printf(popd_out, "-ERR [AUTH] authenticating: %s\r\n",
 		    sasl_errstring(sasl_result, NULL, NULL));
 
-	syslog(LOG_NOTICE, "badlogin: %s APOP (%s) %s",
-	       popd_clienthost, popd_apop_chal,
-	       sasl_errdetail(popd_saslconn));
-	
 	return;
     }
 
@@ -1292,11 +1295,6 @@ void cmd_auth(char *arg)
 	    break;
 	default:
 	    /* failed authentication */
-	    sleep(3);
-		
-	    prot_printf(popd_out, "-ERR [AUTH] authenticating: %s\r\n",
-			sasl_errstring(sasl_result, NULL, NULL));
-
 	    if (authtype) {
 		syslog(LOG_NOTICE, "badlogin: %s %s %s",
 		       popd_clienthost, authtype,
@@ -1305,6 +1303,14 @@ void cmd_auth(char *arg)
 		syslog(LOG_NOTICE, "badlogin: %s %s",
 		       popd_clienthost, authtype);
 	    }
+
+	    sleep(3);
+		
+	    /* Don't allow user probing */
+	    if (sasl_result == SASL_NOUSER) sasl_result = SASL_BADAUTH;
+		
+	    prot_printf(popd_out, "-ERR [AUTH] authenticating: %s\r\n",
+			sasl_errstring(sasl_result, NULL, NULL));
 	}
 	
 	reset_saslconn(&popd_saslconn);
--- a/imap/proxyd.c
+++ b/imap/proxyd.c
@@ -2106,7 +2106,7 @@ void cmd_login(char *tag, char *user)
     char c;
     struct buf passwdbuf;
     char *passwd;
-    char *reply = 0;
+    const char *reply = 0;
     int r;
 
     if (proxyd_userid) {
@@ -2180,17 +2180,19 @@ void cmd_login(char *tag, char *user)
 				 strlen(canon_user),
 				 passwd,
 				 strlen(passwd)))!=SASL_OK) {
-	const char *errorstring = sasl_errstring(r, NULL, NULL);
-	if (reply) {
-	    syslog(LOG_NOTICE, "badlogin: %s plaintext %s %s",
-		   proxyd_clienthost, canon_user, reply);
-	}
+	syslog(LOG_NOTICE, "badlogin: %s plaintext %s %s",
+	       proxyd_clienthost, canon_user, sasl_errdetail(proxyd_saslconn));
+
 	/* Apply penalty only if not under layer */
 	if (proxyd_starttls_done == 0)
 	    sleep(3);
-	if (errorstring) {
+
+	/* Don't allow user probing */
+	if (r == SASL_NOUSER) r = SASL_BADAUTH;
+
+	if ((reply = sasl_errstring(r, NULL, NULL)) != NULL) {
 	    prot_printf(proxyd_out, "%s NO Login failed: %s\r\n", 
-			tag, errorstring);
+			tag, reply);
 	} else {
 	    prot_printf(proxyd_out, "%s NO Login failed.", tag);
 	}
@@ -2276,8 +2278,6 @@ void cmd_authenticate(char *tag, char *a
 	    break;
 	default: 
 	    /* failed authentication */
-	    errorstring = sasl_errstring(sasl_result, NULL, NULL);
-
 	    syslog(LOG_NOTICE, "badlogin: %s %s [%s]",
 		   proxyd_clienthost, authtype, sasl_errdetail(proxyd_saslconn));
 
@@ -2286,6 +2286,10 @@ void cmd_authenticate(char *tag, char *a
 				VARIABLE_LISTEND);
 	    sleep(3);
 
+	    /* Don't allow user probing */
+	    if (sasl_result == SASL_NOUSER) sasl_result = SASL_BADAUTH;
+
+	    errorstring = sasl_errstring(sasl_result, NULL, NULL);
 	    if (errorstring) {
 		prot_printf(proxyd_out, "%s NO %s\r\n", tag, errorstring);
 	    } else {
@@ -4253,13 +4257,13 @@ void cmd_getquotaroot(char *tag, char *n
 						proxyd_userid, mailboxname);
     if (!r) r = mlookup(mailboxname, &server, NULL, NULL);
 
-    if(proxyd_userisadmin) {
+    if(!r && proxyd_userisadmin) {
 	/* If they are an admin, they won't retain that privledge if we
 	 * proxy for them, so we need to refer them -- even if they haven't
 	 * told us they're able to handle it. */
 	proxyd_refer(tag, server, name);
-    } else {
-	if (!r) s = proxyd_findserver(server);
+    } else if (!r) {
+	s = proxyd_findserver(server);
 
 	if (s) {
 	    prot_printf(s->out, "%s Getquotaroot {%d+}\r\n%s\r\n",
@@ -4268,11 +4272,10 @@ void cmd_getquotaroot(char *tag, char *n
 	} else {
 	    r = IMAP_SERVER_UNAVAILABLE;
 	}
+    }
 
-	if (r) {
-	    prot_printf(proxyd_out, "%s NO %s\r\n", tag, error_message(r));
-	    return;
-	}
+    if (r) {
+	prot_printf(proxyd_out, "%s NO %s\r\n", tag, error_message(r));
     }
 }
 
