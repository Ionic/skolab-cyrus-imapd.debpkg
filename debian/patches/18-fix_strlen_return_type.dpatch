#! /bin/sh /usr/share/dpatch/dpatch-run
## 18-fix_strlen_return_type.dpatch by Sven Mueller <debian@incase.de>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Fix return type of strlen calls and snprintf/prot_printf format
## DP: strings.

@DPATCH@
--- a/imap/imapd.c
+++ b/imap/imapd.c
@@ -6095,8 +6095,8 @@ static int trashacl(struct protstream *p
     memset(&tmp, 0, sizeof(struct buf));
     memset(&user, 0, sizeof(struct buf));
 
-    prot_printf(pout, "ACL0 GETACL {%d+}\r\n%s\r\n",
-		strlen(mailbox), mailbox);
+    prot_printf(pout, "ACL0 GETACL {%lu+}\r\n%s\r\n",
+		(unsigned long) strlen(mailbox), mailbox);
 
     while(1) {
 	c = getword(pin, &tag);
@@ -6146,9 +6146,9 @@ static int trashacl(struct protstream *p
 
 		snprintf(tagbuf, sizeof(tagbuf), "ACL%d", ++i);
 		
-		prot_printf(pout, "%s DELETEACL {%d+}\r\n%s {%d+}\r\n%s\r\n",
-			    tagbuf, strlen(mailbox), mailbox,
-			    strlen(user.s), user.s);
+		prot_printf(pout, "%s DELETEACL {%lu+}\r\n%s {%lu+}\r\n%s\r\n",
+			    tagbuf, (unsigned long) strlen(mailbox), mailbox,
+			    (unsigned long) strlen(user.s), user.s);
 		if(c == '\r') {
 		    c = prot_getc(pin);
 		    if(c != '\n') {
@@ -6223,11 +6223,11 @@ static int dumpacl(struct protstream *pi
 
 	snprintf(tag, sizeof(tag), "SACL%d", tagnum++);
 	
-	prot_printf(pout, "%s SETACL {%d+}\r\n%s {%d+}\r\n%s {%d+}\r\n%s\r\n",
+	prot_printf(pout, "%s SETACL {%d+}\r\n%s {%lu+}\r\n%s {%lu+}\r\n%s\r\n",
 		    tag,
 		    mailboxlen, mailbox,
-		    strlen(acl), acl,
-		    strlen(rights), rights);
+		    (unsigned long) strlen(acl), acl,
+		    (unsigned long) strlen(rights), rights);
 
 	while(1) {
 	    c = getword(pin, &inbuf);
@@ -6341,11 +6341,11 @@ static int do_xfer_single(char *toserver
     if(!r) {
 	if(topart) {
 	    /* need to send partition as an atom */
-	    prot_printf(be->out, "LC1 LOCALCREATE {%d+}\r\n%s %s\r\n",
-			strlen(name), name, topart);
+	    prot_printf(be->out, "LC1 LOCALCREATE {%lu+}\r\n%s %s\r\n",
+			(unsigned long) strlen(name), name, topart);
 	} else {
-	    prot_printf(be->out, "LC1 LOCALCREATE {%d+}\r\n%s\r\n",
-			strlen(name), name);
+	    prot_printf(be->out, "LC1 LOCALCREATE {%lu+}\r\n%s\r\n",
+			(unsigned long) strlen(name), name);
 	}
 	r = getresult(be->in, "LC1");
 	if(r) syslog(LOG_ERR, "Could not move mailbox: %s, LOCALCREATE failed",
@@ -6379,7 +6379,8 @@ static int do_xfer_single(char *toserver
     if(!r) {
 	backout_mupdate = 1;
 
-	prot_printf(be->out, "D01 UNDUMP {%d+}\r\n%s ", strlen(name), name);
+	prot_printf(be->out, "D01 UNDUMP {%lu+}\r\n%s ",
+		    (unsigned long) strlen(name), name);
 
 	r = dump_mailbox(NULL, mailboxname, path, acl, 0, be->in, be->out,
 			 imapd_authstate);
@@ -6425,8 +6426,8 @@ static int do_xfer_single(char *toserver
 	/* 6.5) Kick remote server to correct mupdate entry */
 	/* Note that we don't really care if this succeeds or not */
 	if (mupdate_h) {
-	    prot_printf(be->out, "MP1 MUPDATEPUSH {%d+}\r\n%s\r\n",
-			strlen(name), name);
+	    prot_printf(be->out, "MP1 MUPDATEPUSH {%lu+}\r\n%s\r\n",
+			(unsigned long) strlen(name), name);
 	    rerr = getresult(be->in, "MP1");
 	    if(rerr) {
 		syslog(LOG_ERR,
@@ -6465,8 +6466,8 @@ done:
     }
     if(r && backout_remotebox) {
 	rerr = 0;
-	prot_printf(be->out, "LD1 LOCALDELETE {%d+}\r\n%s\r\n",
-		    strlen(name), name);
+	prot_printf(be->out, "LD1 LOCALDELETE {%lu+}\r\n%s\r\n",
+		    (unsigned long) strlen(name), name);
 	rerr = getresult(be->in, "LD1");
  	if(rerr) {
 	    syslog(LOG_ERR,
@@ -6661,9 +6662,10 @@ void cmd_xfer(char *tag, char *name, cha
 	    if(!r) {
 		/* note use of + to force the setting of a nonexistant
 		 * quotaroot */
-		prot_printf(be->out, "Q01 SETQUOTA {%d+}\r\n" \
+		prot_printf(be->out, "Q01 SETQUOTA {%lu+}\r\n" \
 			    "+%s (STORAGE %d)\r\n",
-			    strlen(name)+1, name, quota.limit);
+			    (unsigned long) strlen(name)+1,
+			    name, quota.limit);
 		r = getresult(be->in, "Q01");
 		if(r) syslog(LOG_ERR,
 			     "Could not move mailbox: %s, " \
@@ -7207,7 +7209,7 @@ const char *s;
 
     /* if it's too long, literal it */
     if (*p || len >= 1024) {
-	prot_printf(imapd_out, "{%u}\r\n%s", strlen(s), s);
+	prot_printf(imapd_out, "{%lu}\r\n%s", (unsigned long) strlen(s), s);
     } else {
 	prot_printf(imapd_out, "\"%s\"", s);
     }
@@ -7237,7 +7239,7 @@ const char *s;
 
     /* if it's too long, literal it */
     if (*p || len >= 1024) {
-	prot_printf(imapd_out, "{%u}\r\n%s", strlen(s), s);
+	prot_printf(imapd_out, "{%lu}\r\n%s", (unsigned long) strlen(s), s);
     } else {
 	prot_printf(imapd_out, "\"%s\"", s);
     }
--- a/imap/mbdump.c
+++ b/imap/mbdump.c
@@ -271,8 +271,8 @@ int dump_mailbox(const char *tag, const
 
 	/* send filename, size, and contents */
 	if(first) {
-	    prot_printf(pout, "{%d}\r\n",
-			strlen(name));
+	    prot_printf(pout, "{%lu}\r\n",
+			(unsigned long) strlen(name));
 
 	    if(!tag) {
 		/* synchronize */
@@ -292,8 +292,8 @@ int dump_mailbox(const char *tag, const
 
 	    first = 0;
 	} else {
-	    prot_printf(pout, " {%d%s}\r\n%s {%lu%s}\r\n",
-			strlen(name),
+	    prot_printf(pout, " {%lu%s}\r\n%s {%lu%s}\r\n",
+			(unsigned long) strlen(name),
 			(!tag ? "+" : ""),
 			name, len,
 			(!tag ? "+" : ""));
@@ -327,8 +327,8 @@ int dump_mailbox(const char *tag, const
 
 	/* send filename, size, and contents */
 	if(first) {
-	    prot_printf(pout, "{%d}\r\n",
-			strlen(data_files[i]));
+	    prot_printf(pout, "{%lu}\r\n",
+			(unsigned long) strlen(data_files[i]));
 	    
 	    if(!tag) {
 		/* synchronize */
@@ -347,8 +347,8 @@ int dump_mailbox(const char *tag, const
 			(!tag ? "+" : ""));
 	    first = 0;
 	} else {
-	    prot_printf(pout, " {%d%s}\r\n%s {%lu%s}\r\n",
-			strlen(data_files[i]),
+	    prot_printf(pout, " {%lu%s}\r\n%s {%lu%s}\r\n",
+			(unsigned long) strlen(data_files[i]),
 			(!tag ? "+" : ""),
 			data_files[i], len,
 			(!tag ? "+" : ""));
@@ -474,8 +474,8 @@ int dump_mailbox(const char *tag, const
 				snprintf(ext_fname, sizeof(ext_fname),
 					 "SIEVE-%s", next->d_name);
 			    }
-			    prot_printf(pout, " {%d%s}\r\n%s {%lu%s}\r\n",
-					strlen(ext_fname), 
+			    prot_printf(pout, " {%lu%s}\r\n%s {%lu%s}\r\n",
+					(unsigned long) strlen(ext_fname), 
 					(!tag ? "+" : ""),
 					ext_fname,
 					len,
--- a/imap/message.c
+++ b/imap/message.c
@@ -2060,7 +2060,7 @@ char *s;
     if (*p || len >= 1024) {
 	/* Write out as literal */
 	char buf[100];
-	snprintf(buf, sizeof(buf), "{%u}\r\n", strlen(s));
+	snprintf(buf, sizeof(buf), "{%lu}\r\n", (unsigned long) strlen(s));
 	message_ibuf_ensure(ibuf, strlen(s)+strlen(buf));
 	for (p = buf; *p; p++) *(ibuf->end)++ = *p;
 	for (p = s; *p; p++) *(ibuf->end)++ = *p;
--- a/imap/mupdate-client.c
+++ b/imap/mupdate-client.c
@@ -330,9 +330,11 @@ int mupdate_activate(mupdate_handle *han
     if (!handle->saslcompleted) return MUPDATE_NOAUTH;
 
     prot_printf(handle->pout,
-		"X%u ACTIVATE {%d+}\r\n%s {%d+}\r\n%s {%d+}\r\n%s\r\n", 
-		handle->tagn++, strlen(mailbox), mailbox, 
-		strlen(server), server, strlen(acl), acl);
+		"X%u ACTIVATE {%lu+}\r\n%s {%lu+}\r\n%s {%lu+}\r\n%s\r\n", 
+		handle->tagn++,
+		(unsigned long) strlen(mailbox), mailbox,
+		(unsigned long) strlen(server), server,
+		(unsigned long) strlen(acl), acl);
 
     ret = mupdate_scarf(handle, mupdate_scarf_one, NULL, 1, &response);
     if (ret) {
@@ -355,9 +357,10 @@ int mupdate_reserve(mupdate_handle *hand
     if (!handle->saslcompleted) return MUPDATE_NOAUTH;
 
     prot_printf(handle->pout,
-		"X%u RESERVE {%d+}\r\n%s {%d+}\r\n%s\r\n",
-		handle->tagn++, strlen(mailbox), mailbox, 
-		strlen(server), server);
+		"X%u RESERVE {%lu+}\r\n%s {%lu+}\r\n%s\r\n",
+		handle->tagn++,
+		(unsigned long) strlen(mailbox), mailbox, 
+		(unsigned long) strlen(server), server);
 
     ret = mupdate_scarf(handle, mupdate_scarf_one, NULL, 1, &response);
     if (ret) {
@@ -380,9 +383,10 @@ int mupdate_deactivate(mupdate_handle *h
     if (!handle->saslcompleted) return MUPDATE_NOAUTH;
 
     prot_printf(handle->pout,
-		"X%u DEACTIVATE {%d+}\r\n%s {%d+}\r\n%s\r\n",
-		handle->tagn++, strlen(mailbox), mailbox, 
-		strlen(server), server);
+		"X%u DEACTIVATE {%lu+}\r\n%s {%lu+}\r\n%s\r\n",
+		handle->tagn++,
+		(unsigned long) strlen(mailbox), mailbox, 
+		(unsigned long) strlen(server), server);
 
     ret = mupdate_scarf(handle, mupdate_scarf_one, NULL, 1, &response);
     if (ret) {
@@ -405,8 +409,8 @@ int mupdate_delete(mupdate_handle *handl
     if (!handle->saslcompleted) return MUPDATE_NOAUTH;
 
     prot_printf(handle->pout,
-		"X%u DELETE {%d+}\r\n%s\r\n", handle->tagn++, 
-		strlen(mailbox), mailbox);
+		"X%u DELETE {%lu+}\r\n%s\r\n", handle->tagn++, 
+		(unsigned long) strlen(mailbox), mailbox);
 
     ret = mupdate_scarf(handle, mupdate_scarf_one, NULL, 1, &response);
     if (ret) {
@@ -474,8 +478,8 @@ int mupdate_find(mupdate_handle *handle,
     if(!handle || !mailbox || !target) return MUPDATE_BADPARAM;
 
     prot_printf(handle->pout,
-		"X%u FIND {%d+}\r\n%s\r\n", handle->tagn++, 
-		strlen(mailbox), mailbox);
+		"X%u FIND {%lu+}\r\n%s\r\n", handle->tagn++, 
+		(unsigned long) strlen(mailbox), mailbox);
 
     memset(&(handle->mailboxdata_buf), 0, sizeof(handle->mailboxdata_buf));
 
@@ -507,8 +511,8 @@ int mupdate_list(mupdate_handle *handle,
 
     if(prefix) {
 	prot_printf(handle->pout,
-		    "X%u LIST {%d+}\r\n%s\r\n", handle->tagn++,
-		    strlen(prefix), prefix);
+		    "X%u LIST {%lu+}\r\n%s\r\n", handle->tagn++,
+		    (unsigned long) strlen(prefix), prefix);
     } else {
 	prot_printf(handle->pout,
 		    "X%u LIST\r\n", handle->tagn++);
--- a/imap/mupdate.c
+++ b/imap/mupdate.c
@@ -1613,20 +1613,20 @@ void cmd_find(struct conn *C, const char
     pthread_mutex_unlock(&mailboxes_mutex); /* UNLOCK */
 
     if (m && m->t == SET_ACTIVE) {
-	prot_printf(C->pout, "%s MAILBOX {%d+}\r\n%s {%d+}\r\n%s {%d+}\r\n%s\r\n",
+	prot_printf(C->pout, "%s MAILBOX {%lu+}\r\n%s {%lu+}\r\n%s {%lu+}\r\n%s\r\n",
 		    tag,
-		    strlen(m->mailbox), m->mailbox,
-		    strlen(m->server), m->server,
-		    strlen(m->acl), m->acl);
+		    (unsigned long) strlen(m->mailbox), m->mailbox,
+		    (unsigned long) strlen(m->server), m->server,
+		    (unsigned long) strlen(m->acl), m->acl);
     } else if (m && m->t == SET_RESERVE) {
-	prot_printf(C->pout, "%s RESERVE {%d+}\r\n%s {%d+}\r\n%s\r\n",
+	prot_printf(C->pout, "%s RESERVE {%lu+}\r\n%s {%lu+}\r\n%s\r\n",
 		    tag,
-		    strlen(m->mailbox), m->mailbox,
-		    strlen(m->server), m->server);
+		    (unsigned long) strlen(m->mailbox), m->mailbox,
+		    (unsigned long) strlen(m->server), m->server);
     } else if (send_delete) {
 	/* not found, if needed, send a delete */
-	prot_printf(C->pout, "%s DELETE {%d+}\r\n%s\r\n",
-		    tag, strlen(mailbox), mailbox);
+	prot_printf(C->pout, "%s DELETE {%lu+}\r\n%s\r\n",
+		    tag, (unsigned long) strlen(mailbox), mailbox);
     }
     
     free_mbent(m);
@@ -1668,17 +1668,17 @@ static int sendupdate(char *name,
 	    switch (m->t) {
 	    case SET_ACTIVE:
 		prot_printf(C->pout,
-			    "%s MAILBOX {%d+}\r\n%s {%d+}\r\n%s {%d+}\r\n%s\r\n",
+			    "%s MAILBOX {%lu+}\r\n%s {%lu+}\r\n%s {%lu+}\r\n%s\r\n",
 			    C->streaming,
-			    strlen(m->mailbox), m->mailbox,
-			    strlen(m->server), m->server,
-			    strlen(m->acl), m->acl);
+			    (unsigned long) strlen(m->mailbox), m->mailbox,
+			    (unsigned long) strlen(m->server), m->server,
+			    (unsigned long) strlen(m->acl), m->acl);
 		break;
 	    case SET_RESERVE:
-		prot_printf(C->pout, "%s RESERVE {%d+}\r\n%s {%d+}\r\n%s\r\n",
+		prot_printf(C->pout, "%s RESERVE {%lu+}\r\n%s {%lu+}\r\n%s\r\n",
 			    C->streaming,
-			    strlen(m->mailbox), m->mailbox,
-			    strlen(m->server), m->server);
+			    (unsigned long) strlen(m->mailbox), m->mailbox,
+			    (unsigned long) strlen(m->server), m->server);
 		break;
 		
 	    case SET_DELETE:
--- a/imap/proxyd.c
+++ b/imap/proxyd.c
@@ -2841,7 +2841,8 @@ void cmd_append(char *tag, char *name)
     if (!r) {
 	int is_active = 1;
 	s->context = (void*) &is_active;
-	prot_printf(s->out, "%s Append {%d+}\r\n%s ", tag, strlen(name), name);
+ 	prot_printf(s->out, "%s Append {%lu+}\r\n%s ", tag,
+ 			(unsigned long) strlen(name), name);
 	if (!(r = pipe_command(s, 16384))) {
 	    pipe_until_tag(s, tag, 0);
 	}
@@ -2917,8 +2918,8 @@ void cmd_select(char *tag, char *cmd, ch
 	return;
     }
 
-    prot_printf(backend_current->out, "%s %s {%d+}\r\n%s\r\n", tag, cmd, 
-		strlen(name), name);
+    prot_printf(backend_current->out, "%s %s {%lu+}\r\n%s\r\n", tag, cmd, 
+		(unsigned long) strlen(name), name);
     switch (pipe_including_tag(backend_current, tag, 0)) {
     case PROXY_OK:
 	proc_register("proxyd", proxyd_clienthost, proxyd_userid, mailboxname);
@@ -3148,8 +3149,9 @@ void cmd_copy(char *tag, char *sequence,
 		    r == 0 ? "[TRYCREATE] " : "", error_message(r));
     } else if (s == backend_current) {
 	/* this is the easy case */
-	prot_printf(backend_current->out, "%s %s %s {%d+}\r\n%s\r\n",
-		    tag, cmd, sequence, strlen(name), name);
+	prot_printf(backend_current->out, "%s %s %s {%lu+}\r\n%s\r\n",
+		    tag, cmd, sequence, 
+		    (unsigned long) strlen(name), name);
 	pipe_including_tag(backend_current, tag, 0);
     } else {
 	char mytag[128];
@@ -3310,7 +3312,8 @@ void cmd_copy(char *tag, char *sequence,
 	}
 
 	/* start the append */
-	prot_printf(s->out, "%s Append {%d+}\r\n%s", tag, strlen(name), name);
+	prot_printf(s->out, "%s Append {%lu+}\r\n%s", tag,
+			(unsigned long) strlen(name), name);
 	prot_printf(backend_current->out, "%s %s %s (Rfc822.peek)\r\n",
 		    mytag, usinguid ? "Uid Fetch" : "Fetch", sequence);
 	for (/* each FETCH response */;;) {
@@ -3555,8 +3558,8 @@ void cmd_create(char *tag, char *name, c
 
     if (!r) {
 	/* ok, send the create to that server */
-	prot_printf(s->out, "%s CREATE {%d+}\r\n%s\r\n", 
-		    tag, strlen(name), name);
+	prot_printf(s->out, "%s CREATE {%lu+}\r\n%s\r\n", 
+		    tag, (unsigned long) strlen(name), name);
 	res = pipe_including_tag(s, tag, 0);
 	tag = "*";		/* can't send another tagged response */
 	
@@ -3596,8 +3599,8 @@ void cmd_delete(char *tag, char *name)
     }
 
     if (!r) {
-	prot_printf(s->out, "%s DELETE {%d+}\r\n%s\r\n", 
-		    tag, strlen(name), name);
+	prot_printf(s->out, "%s DELETE {%lu+}\r\n%s\r\n", 
+		    tag, (unsigned long) strlen(name), name);
 	res = pipe_including_tag(s, tag, 0);
 	tag = "*";		/* can't send another tagged response */
 
@@ -3698,17 +3701,17 @@ void cmd_rename(char *tag, char *oldname
 		/* Cross Server */
 		/* <tag> XFER <name> <dest server> <dest partition> */
 		prot_printf(s->out,
-			    "%s XFER {%d+}\r\n%s {%d+}\r\n%s {%d+}\r\n%s\r\n", 
-			    tag, strlen(oldname), oldname,
-			    strlen(newserver), newserver,
-			    strlen(destpart), destpart);
+			    "%s XFER {%lu+}\r\n%s {%lu+}\r\n%s {%lu+}\r\n%s\r\n", 
+			    tag, (unsigned long) strlen(oldname), oldname,
+			    (unsigned long) strlen(newserver), newserver,
+			    (unsigned long) strlen(destpart), destpart);
 	    }
 	    
 	} else {
 	    /* <tag> XFER <name> <dest server> */
-	    prot_printf(s->out, "%s XFER {%d+}\r\n%s {%d+}\r\n%s\r\n", 
-			tag, strlen(oldname), oldname,
-			strlen(partition), partition);
+	    prot_printf(s->out, "%s XFER {%lu+}\r\n%s {%lu+}\r\n%s\r\n", 
+			tag, (unsigned long) strlen(oldname), oldname,
+			(unsigned long) strlen(partition), partition);
 	}
 	
 	res = pipe_including_tag(s, tag, 0);
@@ -3724,9 +3727,9 @@ void cmd_rename(char *tag, char *oldname
 	    /* do MUPDATE create operations for new mailbox */
 	}
 
-	prot_printf(s->out, "%s RENAME {%d+}\r\n%s {%d+}\r\n%s\r\n", 
-		    tag, strlen(oldname), oldname,
-		    strlen(newname), newname);
+	prot_printf(s->out, "%s RENAME {%lu+}\r\n%s {%lu+}\r\n%s\r\n", 
+		    tag, (unsigned long) strlen(oldname), oldname,
+		    (unsigned long) strlen(newname), newname);
 	res = pipe_including_tag(s, tag, 0);
 	tag = "*";		/* can't send another tagged response */
 	
@@ -3761,8 +3764,8 @@ void cmd_find(char *tag, char *namespace
 
 	if (backend_inbox) {
 	    prot_printf(backend_inbox->out, 
-			"%s Lsub \"\" {%d+}\r\n%s\r\n",
-			tag, strlen(pattern), pattern);
+			"%s Lsub \"\" {%lu+}\r\n%s\r\n",
+			tag, (unsigned long) strlen(pattern), pattern);
 	    pipe_lsub(backend_inbox, tag, 0, "MAILBOX");
 	} else {		/* user doesn't have an INBOX */
 	    /* noop */
@@ -3831,9 +3834,9 @@ void cmd_list(char *tag, int listopts, c
 
 	if (backend_inbox) {
 	    prot_printf(backend_inbox->out, 
-			"%s Lsub {%d+}\r\n%s {%d+}\r\n%s\r\n",
-			tag, strlen(reference), reference,
-			strlen(pattern), pattern);
+			"%s Lsub {%lu+}\r\n%s {%lu+}\r\n%s\r\n",
+			tag, (unsigned long) strlen(reference), reference,
+			(unsigned long) strlen(pattern), pattern);
 	    pipe_lsub(backend_inbox, tag, 0, (listopts & LIST_LSUB) ? "LSUB" : "LIST");
 	} else {		/* user doesn't have an INBOX */
 	    /* noop */
@@ -3922,14 +3925,14 @@ void cmd_changesub(char *tag, char *name
 	
 	if (namespace) {
 	    prot_printf(backend_inbox->out, 
-			"%s %s {%d+}\r\n%s {%d+}\r\n%s\r\n", 
+			"%s %s {%lu+}\r\n%s {%lu+}\r\n%s\r\n", 
 			tag, cmd, 
-			strlen(namespace), namespace,
-			strlen(name), name);
+			(unsigned long) strlen(namespace), namespace,
+			(unsigned long) strlen(name), name);
 	} else {
-	    prot_printf(backend_inbox->out, "%s %s {%d+}\r\n%s\r\n", 
+	    prot_printf(backend_inbox->out, "%s %s {%lu+}\r\n%s\r\n", 
 			tag, cmd, 
-			strlen(name), name);
+			(unsigned long) strlen(name), name);
 	}
 	pipe_including_tag(backend_inbox, tag, 0);
     } else {
@@ -4161,15 +4164,15 @@ void cmd_setacl(char *tag, const char *n
     } else if (!r) {
 	if (rights) {
 	    prot_printf(s->out, 
-			"%s Setacl {%d+}\r\n%s {%d+}\r\n%s {%d+}\r\n%s\r\n",
-			tag, strlen(name), name,
-			strlen(identifier), identifier,
-			strlen(rights), rights);
+			"%s Setacl {%lu+}\r\n%s {%lu+}\r\n%s {%lu+}\r\n%s\r\n",
+			tag, (unsigned long) strlen(name), name,
+			(unsigned long) strlen(identifier), identifier,
+			(unsigned long) strlen(rights), rights);
 	} else {
 	    prot_printf(s->out, 
-			"%s Deleteacl {%d+}\r\n%s {%d+}\r\n%s\r\n",
-			tag, strlen(name), name,
-			strlen(identifier), identifier);
+			"%s Deleteacl {%lu+}\r\n%s {%lu+}\r\n%s\r\n",
+			tag, (unsigned long) strlen(name), name,
+			(unsigned long) strlen(identifier), identifier);
 	}	    
 	res = pipe_including_tag(s, tag, 0);
 	tag = "*";		/* can't send another tagged response */
@@ -4269,8 +4272,8 @@ void cmd_getquotaroot(char *tag, char *n
 	s = proxyd_findserver(server);
 
 	if (s) {
-	    prot_printf(s->out, "%s Getquotaroot {%d+}\r\n%s\r\n",
-			tag, strlen(name), name);
+	    prot_printf(s->out, "%s Getquotaroot {%lu+}\r\n%s\r\n",
+			tag, (unsigned long) strlen(name), name);
 	    pipe_including_tag(s, tag, 0);
 	} else {
 	    r = IMAP_SERVER_UNAVAILABLE;
@@ -4495,8 +4498,8 @@ void cmd_status(char *tag, char *name)
     if (!r) s = proxyd_findserver(server);
     if (!r && !s) r = IMAP_SERVER_UNAVAILABLE;
     if (!r) {
-	prot_printf(s->out, "%s Status {%d+}\r\n%s ", tag,
-		    strlen(name), name);
+	prot_printf(s->out, "%s Status {%lu+}\r\n%s ", tag,
+		    (unsigned long) strlen(name), name);
 	if (!pipe_command(s, 65536)) {
 	    pipe_until_tag(s, tag, 0);
 	}
@@ -4636,7 +4639,7 @@ const char *s;
 
     /* if it's too long, literal it */
     if (*p || len >= 1024) {
-	prot_printf(proxyd_out, "{%u}\r\n%s", strlen(s), s);
+	prot_printf(proxyd_out, "{%lu}\r\n%s", (unsigned long) strlen(s), s);
     } else {
 	prot_printf(proxyd_out, "\"%s\"", s);
     }
@@ -4664,7 +4667,7 @@ void printastring(const char *s)
 
     /* if it's too long, literal it */
     if (*p || len >= 1024) {
-	prot_printf(proxyd_out, "{%u}\r\n%s", strlen(s), s);
+	prot_printf(proxyd_out, "{%lu}\r\n%s", (unsigned long) strlen(s), s);
     } else {
 	prot_printf(proxyd_out, "\"%s\"", s);
     }
--- a/imtest/imtest.c
+++ b/imtest/imtest.c
@@ -624,14 +624,14 @@ static long bio_dump_cb(BIO * bio, int c
 	return (ret);
     
     if (cmd == (BIO_CB_READ | BIO_CB_RETURN)) {
-	printf("read from %08X [%08lX] (%d bytes => %ld (0x%X))\n",
-	       (unsigned int) bio, (long unsigned int) argp,
+	printf("read from %p [%p] (%d bytes => %ld (0x%X))\n",
+	       (void*) bio, (void*) argp,
 	       argi, ret, (unsigned int) ret);
 	tls_dump(argp, (int) ret);
 	return (ret);
     } else if (cmd == (BIO_CB_WRITE | BIO_CB_RETURN)) {
-	printf("write to %08X [%08lX] (%d bytes => %ld (0x%X))\n",
-	       (unsigned int) bio, (long unsigned int) argp,
+	printf("write to %p [%p] (%d bytes => %ld (0x%X))\n",
+	       (void*) bio, (void*) argp,
 	       argi, ret, (unsigned int) ret);
 	tls_dump(argp, (int) ret);
     }
@@ -1778,7 +1778,8 @@ static int append_msg(char *mbox, int si
 {
     int lup;
     
-    prot_printf(pout,"A003 APPEND %s (\\Seen) {%u}\r\n",mbox,size+strlen(HEADERS));
+    prot_printf(pout,"A003 APPEND %s (\\Seen) {%lu}\r\n",mbox,
+		    (unsigned long) size+strlen(HEADERS));
     /* do normal header foo */
     prot_printf(pout,HEADERS);
     
--- a/master/master.c
+++ b/master/master.c
@@ -1883,7 +1883,7 @@ int main(int argc, char **argv)
 	    }
 	    
 	    /* Write PID */
-	    snprintf(buf, sizeof(buf), "%lu\n", (unsigned long int)getpid());
+	    snprintf(buf, sizeof(buf), "%lu\n", (unsigned long int) getpid());
 	    if(lseek(pidfd, 0, SEEK_SET) == -1 ||
 	       ftruncate(pidfd, 0) == -1 ||
 	       write(pidfd, buf, strlen(buf)) == -1) {
--- a/timsieved/actions.c
+++ b/timsieved/actions.c
@@ -364,7 +364,8 @@ int putscript(struct protstream *conn, m
 
   if (result != TIMSIEVE_OK) {
       if (errstr && *errstr) { 
-	  prot_printf(conn, "NO {%d}\r\n%s\r\n", strlen(errstr), errstr);
+	  prot_printf(conn, "NO {%lu}\r\n%s\r\n",
+			  (unsigned long) strlen(errstr), errstr);
 	  free(errstr);
       } else {
 	  if (errstr) free(errstr);
