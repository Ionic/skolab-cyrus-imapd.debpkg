Description: cunit: CU_EXPECT_CYRFATAL needs the string, not just the
 pointer
 .
 The fatal() msg argument probably points into the code-under-test's
 stack frame, which is invalidated when we longjmp back to the test!
 .
 So we need to save a copy of it, not just the pointer
Author: ellie timoney <ellie@fastmail.com>
Origin: upstream, https://github.com/cyrusimap/cyrus-imapd/compare/cyrus-imapd-3.2...elliefm:v32/3040-deprecated-option-tests
Bug: https://github.com/cyrusimap/cyrus-imapd/issues/3040
Bug-Debian: https://bugs.debian.org/960658
Reviewed-By: Xavier Guimard <yadd@debian.org>
Last-Update: 2020-05-29

--- a/cunit/cyrunit.h
+++ b/cunit/cyrunit.h
@@ -232,12 +232,13 @@
 
 extern jmp_buf fatal_jbuf;
 extern int fatal_expected;
-extern const char *fatal_string;
+extern char *fatal_string;
 extern int fatal_code;
 
 #define CU_EXPECT_CYRFATAL_BEGIN                                \
 do {                                                            \
     fatal_expected = 1;                                         \
+    if (fatal_string) free(fatal_string);                       \
     fatal_string = NULL;                                        \
     fatal_code = 0;                                             \
     if (!setjmp(fatal_jbuf)) {                                  \
@@ -250,6 +251,8 @@
         const char *_es = (expected_string);                    \
         CU_ASSERT_EQUAL(fatal_code, _ec);                       \
         if (_es) CU_ASSERT_STRING_EQUAL(fatal_string, _es);     \
+        if (fatal_string) free(fatal_string);                   \
+        fatal_string = NULL;                                    \
 }   } while (0)
 
 
--- a/cunit/unit.c
+++ b/cunit/unit.c
@@ -80,7 +80,7 @@
 
 jmp_buf fatal_jbuf;
 int fatal_expected;
-const char *fatal_string;
+char *fatal_string = NULL;
 int fatal_code;
 
 EXPORTED void fatal(const char *s, int code)
@@ -88,7 +88,7 @@
     log1("fatal(%s)", s);
     if (fatal_expected) {
         fatal_expected = 0;
-        fatal_string = s;
+        fatal_string = xstrdupnull(s);
         fatal_code = code;
         longjmp(fatal_jbuf, code);
     }
